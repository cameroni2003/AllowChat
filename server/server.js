// Generated by CoffeeScript 1.6.3
(function() {
  var Member, MemberSchema, Schema, app, creds, db, express, io, mongoose, server;

  creds = require('./credentials');

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  mongoose.connect(creds.connectionString);

  db = mongoose.connection;

  db.on('error', function() {
    console.error('error connecting');
    return process.exit(1);
  });

  db.once('open', function() {
    return console.log('connected to mongo server');
  });

  MemberSchema = mongoose.Schema({
    name: String,
    allowedChat: [
      {
        type: Schema.Types.ObjectId,
        ref: 'Member'
      }
    ]
  });

  Member = mongoose.model('Member', MemberSchema);

  Member.find({
    name: 'cam'
  }).lean().exec(function(err, docs) {
    var cam;
    if (!docs.length) {
      cam = new Member({
        name: 'cam'
      });
      return cam.save();
    }
  });

  Member.find({
    name: 'jake'
  }).exec(function(err, members) {
    var jake;
    if (!members.length) {
      jake = new Member({
        name: 'jake'
      });
      return jake.save();
    }
  });

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  app.use(express["static"](__dirname + '/public'));

  server.listen(8888);

  io.sockets.on('connection', function(socket) {
    socket.emit('welcome', {
      msg: 'connected!'
    });
    socket.on('login', function(data) {
      return Member.find({
        name: data.name
      }).exec(function(err, members) {
        console.log(err);
        if (members.length === 1) {
          return socket.set('member', members[0], function() {
            socket.emit("welcome " + members[0].name);
            return socket.emit('friendUpdate', {
              friends: members[0].allowedChat
            });
          });
        } else {
          return socket.emit("Unknown user: " + data.name);
        }
      });
    });
    return socket.on('addFriend', function(data) {
      return Member.find({
        name: data.friendId
      }).exec(function(err, members) {
        if (err) {
          console.log(err);
          console.log("didn't find friend " + data.friendId);
          return;
        }
        return socket.get('member', function(err, member) {
          var friend;
          console.log(member);
          if (members.length === 1) {
            friend = members[0];
            member.allowedChat.push(friend);
            member.save();
            return console.log("adding " + friend.name + " to " + member.name + "'s friend list");
          }
        });
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=server.map
*/
